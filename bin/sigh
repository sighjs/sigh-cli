#!/usr/bin/env node

var fs = require('fs')
var path = require('path')

function main() {
  var sighPath
  for (var cwd = process.cwd(); cwd !== '/'; process.chdir('..'), cwd = process.cwd()) {
    if (fs.existsSync('sigh.js') || fs.existsSync('Sigh.js')) {
      sighPath = path.join(cwd, 'node_modules', 'sigh')
      break
    }
  }

  var sigh, sighVersion
  if (sighPath) {
    sigh = require(sighPath)
    sighVersion = 'sigh: ' + require(path.join(sighPath, 'package.json')).version + ', '
  }
  else {
     sighVersion= ''
  }

  var cliVersion = require('../package.json').version
  var argv = require('yargs')
    .usage('$0 [args] [...pipelines]\n ' + sighVersion + 'sigh-cli: ' + cliVersion)
    .help('help')
    .alias('h', 'help')
    .describe('h', 'show this help')
    .alias('e', 'environment')
    .describe('e', 'specify environment')
    .default('e', 'development')
    .alias('j', 'jobs')
    .describe('j', 'number of worker subprocesses to spawn')
    .default('j', 3) // TODO: default to number of CPU cores - 1?
    .count('v')
    .alias('v', 'verbose')
    .describe('v', 'increase verbosity')
    .boolean('w')
    .alias('w', 'watch')
    .describe('w', 'watch files for changes')
    .argv

  argv.pipelines = argv._
  delete argv._

  if (sigh) {
    return sigh.invoke(argv).catch(process.exit.bind(null, 1))
  }
  else {
    console.warn('Could not find sigh.js')
    process.exit(1)
  }
}

main()
